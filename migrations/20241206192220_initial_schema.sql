-- ENUMS
--
--
-- Game Mode Codes
CREATE TYPE "public"."game_mode_codes" AS ENUM ('classic_2', 'classic_4');
ALTER TYPE "public"."game_mode_codes" OWNER TO "postgres";
--
--
-- Game Sessions Status
CREATE TYPE "public"."game_sessions_status" AS ENUM ('created', 'running', 'paused', 'over', 'async');
ALTER TYPE "public"."game_sessions_status" OWNER TO "postgres";
--
--
-- TABLES
--
--
-- GAME_MODES
CREATE TABLE IF NOT EXISTS "public"."game_modes" (
  "id" smallint NOT NULL,
  "code" "public"."game_mode_codes" NOT NULL,
  "participant" smallint CHECK(
    "participant" > 0
    AND MOD("participant", 2) = 0
  ),
  "time_per_player" smallint DEFAULT NULL CHECK("time_per_player" >= 0),
  -- NUMBER OF SECONDS A PLAYER DISPOSE FOR A GAME, NULL IS INFINITE
  "board_size" smallint CHECK(
    "board_size" > 0
    AND MOD("board_size", 2) <> 0
  ),
  "wall_per_player" smallint CHECK("wall_per_player" >= 0)
);
--
ALTER TABLE "public"."game_modes" OWNER TO "postgres";
--
ALTER TABLE "public"."game_modes"
ALTER COLUMN "id"
ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_modes_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
GRANT ALL ON SEQUENCE "public"."game_modes_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."game_modes_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."game_modes_seq" TO "service_role";
--
ALTER TABLE ONLY "public"."game_modes"
ADD CONSTRAINT "game_modes_pkey" PRIMARY KEY ("id");
--
CREATE INDEX IF NOT EXISTS "game_modes_code_idx" ON "public"."game_modes" ("code");
ALTER INDEX "game_modes_code_idx" OWNER TO "postgres";
--
CREATE POLICY "Read access for authenticated" ON "public"."game_modes" FOR
SELECT TO "authenticated" USING (true);
--
ALTER TABLE "public"."game_modes" ENABLE ROW LEVEL SECURITY;
--
GRANT ALL ON TABLE "public"."game_modes" TO "anon";
GRANT ALL ON TABLE "public"."game_modes" TO "authenticated";
GRANT ALL ON TABLE "public"."game_modes" TO "service_role";
--
--
-- GAME_MOVES
CREATE TABLE IF NOT EXISTS game_moves (
  "id" bigint NOT NULL,
  "created_at" timestamptz DEFAULT now() NOT NULL,
  "x_start" smallint NOT NULL CHECK("x_start" >= 0),
  "y_start" smallint NOT NULL CHECK("y_start" >= 0),
  "x_end" smallint NOT NULL CHECK("x_end" >= 0),
  "y_end" smallint NOT NULL CHECK("y_end" >= 0),
  "turn" smallint NOT NULL CHECK("turn" > 0),
  "player_game_session_id" bigint NOT NULL
);
--
ALTER TABLE "public"."game_moves" OWNER TO "postgres";
--
ALTER TABLE "public"."game_moves"
ALTER COLUMN "id"
ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_moves_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
GRANT ALL ON SEQUENCE "public"."game_moves_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."game_moves_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."game_moves_seq" TO "service_role";
--
ALTER TABLE ONLY "public"."game_moves"
ADD CONSTRAINT "game_moves_pkey" PRIMARY KEY ("id");
--
CREATE INDEX IF NOT EXISTS "game_moves_player_game_session_id_idx" ON "public"."game_moves"("player_game_session_id");
ALTER INDEX "game_moves_player_game_session_id_idx" OWNER TO "postgres";
--
CREATE POLICY "Read access for authenticated" ON "public"."game_moves" FOR
SELECT TO "authenticated" USING (true);
--
CREATE POLICY "Insert access for authenticated based on player_id" ON "public"."game_moves" FOR
INSERT TO "authenticated" WITH CHECK (
    -- TODO
    true
  );
--
ALTER TABLE "public"."game_moves" ENABLE ROW LEVEL SECURITY;
--
GRANT ALL ON TABLE "public"."game_moves" TO "anon";
GRANT ALL ON TABLE "public"."game_moves" TO "authenticated";
GRANT ALL ON TABLE "public"."game_moves" TO "service_role";
--
--
-- GAME SESSIONS
CREATE TABLE IF NOT EXISTS "public"."game_sessions" (
  "id" bigint NOT NULL,
  "created_at" timestamptz DEFAULT now() NOT NULL,
  "status" "public"."game_sessions_status" NOT NULL,
  "current_turn" smallint DEFAULT 0 NOT NULL,
  "game_mode_id" bigint NOT NULL
);
--
ALTER TABLE "public"."game_sessions" OWNER TO "postgres";
--
ALTER TABLE "public"."game_sessions"
ALTER COLUMN "id"
ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_sessions_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
GRANT ALL ON SEQUENCE "public"."game_sessions_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."game_sessions_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."game_sessions_seq" TO "service_role";
--
ALTER TABLE ONLY "public"."game_sessions"
ADD CONSTRAINT "game_sessions_pkey" PRIMARY KEY ("id");
--
CREATE INDEX IF NOT EXISTS "game_sessions_status_idx" ON "public"."game_sessions"("status");
ALTER INDEX "game_sessions_status_idx" OWNER TO "postgres";
--
CREATE UNIQUE INDEX IF NOT EXISTS "game_sessions_id_idx" ON "public"."game_sessions"("id");
ALTER INDEX "game_sessions_id_idx" OWNER TO "postgres";
--
CREATE POLICY "Read access for authenticated" ON "public"."game_sessions" FOR
SELECT TO "authenticated" USING (true);
--
CREATE POLICY "Insert access for authenticated" ON "public"."game_sessions" FOR
INSERT TO "authenticated" WITH CHECK (true);
--
ALTER TABLE "public"."game_sessions" ENABLE ROW LEVEL SECURITY;
--
GRANT ALL ON TABLE "public"."game_sessions" TO "anon";
GRANT ALL ON TABLE "public"."game_sessions" TO "authenticated";
GRANT ALL ON TABLE "public"."game_sessions" TO "service_role";
--
--
-- GAME WALLS
CREATE TABLE IF NOT EXISTS "public"."game_walls" (
  "id" bigint NOT NULL,
  "created_at" timestamptz DEFAULT now() NOT NULL,
  "cell_x_a" smallint NOT NULL CHECK("cell_x_a" >= 0),
  "cell_y_a" smallint NOT NULL CHECK("cell_y_a" >= 0),
  "cell_x_b" smallint NOT NULL CHECK("cell_x_b" >= 0),
  "cell_y_b" smallint NOT NULL CHECK("cell_y_b" >= 0),
  "turn" smallint NOT NULL CHECK("turn" > 0),
  "player_game_session_id" bigint NOT NULL
);
--
ALTER TABLE "public"."game_walls" OWNER TO "postgres";
--
ALTER TABLE "public"."game_walls"
ALTER COLUMN "id"
ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_walls_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
GRANT ALL ON SEQUENCE "public"."game_walls_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."game_walls_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."game_walls_seq" TO "service_role";
--
ALTER TABLE ONLY "public"."game_walls"
ADD CONSTRAINT "game_walls_pkey" PRIMARY KEY ("id");
--
CREATE INDEX IF NOT EXISTS "game_walls_player_game_session_id_idx" ON "public"."game_walls"("player_game_session_id");
ALTER INDEX "game_walls_player_game_session_id_idx" OWNER TO "postgres";
--
CREATE POLICY "Read access for authenticated" ON "public"."game_walls" FOR
SELECT TO "authenticated" USING (true);
--
CREATE POLICY "Insert access for authenticated" ON "public"."game_walls" FOR
INSERT TO "authenticated" WITH CHECK (
    -- TODO
    true
  );
ALTER TABLE "public"."game_walls" ENABLE ROW LEVEL SECURITY;
--
GRANT ALL ON TABLE "public"."game_walls" TO "anon";
GRANT ALL ON TABLE "public"."game_walls" TO "authenticated";
GRANT ALL ON TABLE "public"."game_walls" TO "service_role";
--
--
-- PLAYERS
CREATE TABLE players (
  "id" UUID DEFAULT gen_random_uuid() UNIQUE NOT NULL,
  "name" TEXT NOT NULL DEFAULT 'anonymous' CHECK (
    CHAR_LENGTH("name") > 0
    AND CHAR_LENGTH("name") <= 30
  ),
  "created_at" timestamptz DEFAULT now() NOT NULL,
  "elo" smallint DEFAULT 1000 NOT NULL CHECK ("elo" >= 0),
  total_match smallint DEFAULT 0 NOT NULL CHECK ("total_match" >= 0),
  win smallint DEFAULT 0 NOT NULL CHECK ("win" >= 0),
  loss smallint DEFAULT 0 NOT NULL CHECK ("loss" >= 0)
);
--
ALTER TABLE "public"."players" OWNER TO "postgres";
--
ALTER TABLE ONLY "public"."players"
ADD CONSTRAINT "players_pkey" PRIMARY KEY ("id");
--
CREATE INDEX IF NOT EXISTS "players_id_idx" ON "public"."players"("id");
ALTER INDEX "players_id_idx" OWNER TO "postgres";
--
CREATE POLICY "Read access for authenticated" ON "public"."players" FOR
SELECT TO "authenticated" USING (true);
--
CREATE POLICY "UPDATE for authenticated based on id" ON "public"."players" FOR
UPDATE TO "authenticated" USING (
    (
      SELECT auth.uid()
    ) = id
  ) WITH CHECK (
    (
      SELECT auth.uid()
    ) = id
  );
--
CREATE POLICY "DELETE for authenticated based on id" ON "public"."players" FOR DELETE TO "authenticated" USING (
(
  SELECT auth.uid()
) = id
);
--
ALTER TABLE "public"."players" ENABLE ROW LEVEL SECURITY;
--
GRANT ALL ON TABLE "public"."players" TO "anon";
GRANT ALL ON TABLE "public"."players" TO "authenticated";
GRANT ALL ON TABLE "public"."players" TO "service_role";
--
--
-- PLAYERS GAMES SESSIONS
CREATE TABLE players_game_sessions (
  "id" bigint NOT NULL,
  "player_id" UUID NOT NULL,
  "game_session_id" bigint NOT NULL,
  "created_at" timestamptz DEFAULT now() NOT NULL,
  "position_x" smallint DEFAULT 0 NOT NULL CHECK ("position_x" >= 0),
  "position_y" smallint DEFAULT 0 NOT NULL CHECK ("position_y" >= 0),
  "time" smallint NOT NULL CHECK ("time" >= 0)
);
--
ALTER TABLE "public"."players_game_sessions" OWNER TO "postgres";
--
ALTER TABLE "public"."players_game_sessions"
ALTER COLUMN "id"
ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."players_game_sessions_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
GRANT ALL ON SEQUENCE "public"."players_game_sessions_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."players_game_sessions_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."players_game_sessions_seq" TO "service_role";
--
ALTER TABLE ONLY "public"."players_game_sessions"
ADD CONSTRAINT "players_game_sessions_pkey" PRIMARY KEY ("id");
--
CREATE INDEX IF NOT EXISTS "players_game_sessions_player_id_idx" ON "public"."players_game_sessions"("player_id");
ALTER INDEX "players_game_sessions_player_id_idx" OWNER TO "postgres";
--
CREATE INDEX IF NOT EXISTS "players_game_sessions_game_session_id_idx" ON "public"."players_game_sessions"("game_session_id");
ALTER INDEX "players_game_sessions_game_session_id_idx" OWNER TO "postgres";
--
CREATE UNIQUE INDEX IF NOT EXISTS "players_game_sessions_player_id_game_session_id_idx" ON "public"."players_game_sessions"("player_id", "game_session_id");
ALTER INDEX "players_game_sessions_player_id_game_session_id_idx" OWNER TO "postgres";
--
CREATE POLICY "Read access for authenticated" ON "public"."players_game_sessions" FOR
SELECT TO "authenticated" USING (true);
--
CREATE POLICY "INSERT for authenticated based on id" ON "public"."players_game_sessions" FOR INSERT TO "authenticated" WITH CHECK (
(
  SELECT auth.uid()
) = player_id
);
--
CREATE POLICY "UPDATE for authenticated based on id" ON "public"."players_game_sessions" FOR
UPDATE TO "authenticated" USING (
    (
      SELECT auth.uid()
    ) = player_id
  ) WITH CHECK (
    (
      SELECT auth.uid()
    ) = player_id
  );
--
CREATE POLICY "DELETE for authenticated based on id" ON "public"."players_game_sessions" FOR DELETE TO "authenticated" USING (
(
  SELECT auth.uid()
) = player_id
);
--
ALTER TABLE "public"."players_game_sessions" ENABLE ROW LEVEL SECURITY;
--
GRANT ALL ON TABLE "public"."players_game_sessions" TO "anon";
GRANT ALL ON TABLE "public"."players_game_sessions" TO "authenticated";
GRANT ALL ON TABLE "public"."players_game_sessions" TO "service_role";
--
--
-- FK
ALTER TABLE game_moves
ADD FOREIGN KEY (player_game_session_id) REFERENCES players_game_sessions (id);
ALTER TABLE game_sessions
ADD FOREIGN KEY (game_mode_id) REFERENCES game_modes (id);
ALTER TABLE game_walls
ADD FOREIGN KEY (player_game_session_id) REFERENCES players_game_sessions (id);
ALTER TABLE players_game_sessions
ADD FOREIGN KEY (game_session_id) REFERENCES game_sessions (id);
ALTER TABLE players_game_sessions
ADD FOREIGN KEY (player_id) REFERENCES players (id);